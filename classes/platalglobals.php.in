<?php
/***************************************************************************
 *  Copyright (C) 2003-2018 Polytechnique.org                              *
 *  http://opensource.polytechnique.org/                                   *
 *                                                                         *
 *  This program is free software; you can redistribute it and/or modify   *
 *  it under the terms of the GNU General Public License as published by   *
 *  the Free Software Foundation; either version 2 of the License, or      *
 *  (at your option) any later version.                                    *
 *                                                                         *
 *  This program is distributed in the hope that it will be useful,        *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *  GNU General Public License for more details.                           *
 *                                                                         *
 *  You should have received a copy of the GNU General Public License      *
 *  along with this program; if not, write to the Free Software            *
 *  Foundation, Inc.,                                                      *
 *  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                *
 ***************************************************************************/

class PlatalGlobals extends PlGlobals
{
    const DEBUG_NOCACHE = DEBUG_USERBASE;

    /** The x.org version */
    public $version = '@VERSION@';

    /** db params */
    public $dbdb               = null;
    public $dbprefix           = '';
    public $dbhost             = 'localhost';
    public $dbuser             = null;
    public $dbpwd              = null;
    public $dbcharset          = 'utf8';

    /** default skin */
    public $skin;
    public $register_skin;

    public function __construct()
    {
        parent::__construct(array('platal.ini', 'platal.conf'));
        if (isset($GLOBALS['IS_XNET_SITE'])) {
            $this->core->sitename = 'Polytechnique.net';
        }
    }

    public function init()
    {
        $this->bootstrap(array('NbIns'), array($this, 'updateNbIns'));
        $this->bootstrap(array('NbValid'), array($this, 'updateNbValid'));
    }

    public function asso($key = null)
    {
        static $fetched = false;
        static $aid = null;

        if (isset($GLOBALS['IS_XNET_SITE']) && !$fetched) {
            $gp = Get::v('n');
            if ($p = strpos($gp, '/')) {
                $gp = substr($gp, 0, $p);
            }

            $aid = Group::get($gp);
            $fetched = true;
        }
        if (empty($key)) {
            return $aid;
        } elseif (isset($aid->$key) ) {
            return $aid->$key;
        } else {
            return null;
        }
    }

    public function updateNbIns()
    {
        $count = XDB::rawFetchOneCell("SELECT  COUNT(*)
                                         FROM  accounts         AS a
                                   INNER JOIN  account_profiles AS ap ON (ap.uid = a.uid AND FIND_IN_SET('owner', ap.perms))
                                   INNER JOIN  profiles         AS p  ON (ap.pid = p.pid)
                                        WHERE  a.state = 'active' AND p.deathdate IS NULL");
        $this->changeDynamicConfig(array('NbIns' => $count));
    }

    public function updateNbValid()
    {
        $res = XDB::query("SELECT  COUNT(*)
                             FROM  requests");
        $this->changeDynamicConfig(array('NbValid' => $res->fetchOneCell()));
    }

    public function cacheEnabled()
    {
        return ($this->debug & self::DEBUG_NOCACHE) == 0;
    }
}

/******************************************************************************
 * Dynamic configuration update/edition stuff
 *****************************************************************************/

// vim:set et sw=4 sts=4 sws=4 foldmethod=marker fenc=utf-8:
?>
