Authgroupex - v2
================

This document describes the Authgroupex-v2 protocol.  This protocol allows using polytechnique.org as a single-sign-on (SSO) to authenticate users on external websites, such as the ones of the "Groupes X".

General specifications
----------------------

Here is some vocabulary which is used in this document:

* Polytechnique.org website is used as an SSO provider and is thus refered by *identity provider*.
* The website which uses the SSO to authenticate its users is called the *third-party website*.
* An user which has an account by the SSO provider and wants to use it to log into the third-party website is simply called *the user*.

Moreover every text component is encoded either in UTF-8 (e.g. for names) or in ASCII (e.g. for URLs and signatures in hexadecimal représentation).
In the descriptions, something between brackets (like ``<this>``) refers to a component which may be replaced by something.


Protocol
--------

When a third-party website wants to use Polytechnique.org as an identity provider to authenticate its users, it first needs to redirect its user to the Authgroupex endpoint.
This endpoint is hosted for example at an URL which look like::

    https://www.polytechnique.org/auth-groupex-2?...

The parameters that the third-party website defines in this URL processed by the identity provider (the ``...`` in the example) must satisfy the following requirements (while should be valided by the identity provider):

* A parameter named ``url`` must be present and contain the URL that the identity provider will redirect the user to if it is successfully authenticated.
* A parameter named ``timestamp`` must be present and contain the decimal representation of the Unix timestamp of the current time, i.e. the number of seconds (integer) since 1970-01-01 UTC.
* A parameter named ``challenge`` must be present and contain an alphanumerical text (only ASCII letters and digits are allowed) of at least 32 characters in length, at most 256 characters.  This value can be for example generated by computing the SHA-1 sum of a sequence of random bytes.  This ``challenge`` shall be different for every emitted request (to prevent replay attack).
* A parameter named ``sign`` must be present and contain the cryptographic signature which certifies that the request has been originated from the third-party website which previosly exchanged a shared secret with the identity provider.
* A parameter named ``authreq`` may be present, in which case it contains either the value ``weak`` or ``password`` (literally).  This allows the third-party website to force the user to enter her password when she otherwise is *weakly* authenticated on the identity provider website, for example when using a persistent cookie.
* A parameter named ``group`` may be present, which contains the human-readable identifier of a group as used by the identity provider (for Polytechnique.org it is the *groupes X*).

The signature which is used in the ``sign`` parameter is the hexadecimal representation with lowercase letters of the result of the ``HMAC-SHA256`` algorithm (some implementations are available on Wikipedia, https://en.wikipedia.org/wiki/Hash-based_message_authentication_code).
This algorithm uses 2 parameters:

* *Key*: a pre-shared secret between the third-party website and the identity provider.
* *message*: the concatenation of all other fields as they appear in the URL query (i.e. ``<key>=<value>`` with special characters encoded to satisfy the URL character set requirements), separated by ``&`` symbols (like in the URL query).  Before concatenating the fields, they are sorted in lexicographic order (e.g. ``authreq=weak&challenge=...&sign=...&...``).


The user transmits this request to the identity provider, generally through a ``Location`` HTTP header that the third-party website sends to the user.
When the identiy provider receives a request, it performs a number of security checks:

* Parameter ``url`` is checked against known patterns to identify which third-party website is requested an authentication.  If nothing is found, the request is aborted.
* The pre-shared secret associated with this website is loaded from a persistent storage.
* This secret is used to verify the authenticity of the request, by computing the signature of the request and comparing the result with parameter ``sign``.
* Parameter ``timestamp`` is verified to be an integer represnting a Unix timestamp at most 15 minutes old and at most 15 minutes in the future.  If this verification fails, the request is aborted.
* If there is an ``authreq`` parameter in the request and its value is neither ``weak`` nor ``password``, the request is aborted.

The identity provider then authentifies the user depending on the state of a potential session on the website of the identity provider:

* If the user is not logged into the website, the identity provider prompts the user for her credentials.
* If the user still has an opened session on the website which comes from a successful previous credentials submission, the authentication is considered successful without any user prompt.  There may be a prompt to ask the user to accept to log into the third-party website with her account from the identity provider, depending on what this third-party is.
* If the user has a weak session (e.g. opened thanks to the presence of a persistent cookie) and there is no ``authreq`` parameter in the request or its value is ``weak``, the authentication is considered successful without any user prompt.  If the ``authreq`` is ``password``, the identity provider prompts the user for her credentials and verifies them.

After a successful credential submission if there was a credential prompt, and an agreement from the user to connect to the third-party website using her account from the identity provider if such an agreement is required, the identity provider sends a ``Location`` HTTP header to the user to redirect her to the third-party website, to the location given by ``url`` parameter in the initial request with the authentication result.

The result of the authentication is transmitted to the third-party website through HTTP GET parameters (appended to the URL).
The parameters in the response are the following.

* A ``timestamp`` parameter, holding the Unix timestamp of the current UTC time.
* The initial ``challenge`` parameter, as it was defined by the third-party website.
* A ``sign`` parameter, containing the cryptographic signature of the response, using the same algorithm as for the initial request (hexadecimal representation of an HMAC of every other parameter).
* Other fields depending on what the third-party website agreed to receive from the account provider:

  - ``authreq``: if ``authreq`` parameter is present in the request, the value of ``authreq`` in the response is ``password`` if the user authenticated herself by submitting her credentials, ``weak`` otherwise. If it was not present, no ``authreq`` parameter is added to the response.
  - ``data_hruid``: human-readable unique user ID (in ASCII).
  - ``data_email``: email address.
  - ``data_name``: full name (in UTF-8).
  - ``data_gender``: ``M`` (for male) or ``F`` (for female).
  - ``data_perms``: ``admin`` for a member of the staff of Polytechnique.org, ``user`` otherwise.
  - ``data_grpauth``: rights in the group given by the ``group`` parameter in the request, if present, among ``admin``, ``member`` or nothing.
  - ``data_yentry``: entry year at the École polytechnique.
  - ``data_yexit``: exit year at the École polytechnique.
  - ``data_axid``: a unique user identifier delivered by the AX.


Third-party website set-up procedure
------------------------------------

In order of a third-party website to use Authgroupex, it needs to communicate to the identity provider administrators (Polytechnique.org association) the following information:

* Name of the web site
* URL to be used as the return endpoint (to submit authentication results)
* List of fields the website wants to have

If this application is accepted, the identiy provider admins will reply with a secret key to be used by the website to build user authentication request (to build the required signature).
The administrators will also decide, based on the purpose of the application, whether the identity provider website will display to users using the authentication service with a pre-existing session a page asking her to accept using her account to authenticate on the third-party website.


Other considerations
--------------------

* The identity provider must secure the connection with the user using HTTPS with a valid certificate when prompting the user for her credentials.  It is also considered a better practice if every page related to the authentication process are served using HTTPS.


Open questions
--------------

* Should the response include a paramater ``nonce`` which is a 128-character hexadecimal string generated by the identity provider which is unique for each authentication result?
